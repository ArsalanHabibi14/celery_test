"""
Django settings for picartia project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os

from celery.schedules import crontab
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv("SECRET_KEY"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rest_passwordreset",
    "phonenumber_field",
    "django.contrib.sites",
    "django_extensions",
    # Authentication Apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",  # new
    "dj_rest_auth",
    "rest_auth",
    "oauth2_provider",
    "social_django",
    "rest_framework_social_oauth2",
    #     ================================
    #     Celery Apps
    "dj_rest_auth.registration",
    "django_celery_results",
    "django_celery_beat",
    # "sslserver",
    # Custom Apps
    "users",
    "mosaic",
]

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "picartia.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

WSGI_APPLICATION = "picartia.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "picartia",  # os.getenv("DATABASE_NAME"),
        "USER": "picartia",  # "picartia", #os.getenv("DATABASE_USER"),
        "PASSWORD": "picArtv2",  # "picArtv2", #os.getenv("DATABASE_PASS"),
        "HOST": "localhost",  # os.getenv("DATABASE_HOST"),
        # "PORT": os.getenv("DATABASE_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/static_root")

MEDIA_URL = "/media/"

MEDIA_PATH_FILE = "disk1"

MEDIA_ROOT = os.path.join(BASE_DIR, f"staticfiles/{MEDIA_PATH_FILE}")

MOSAIC_FOLDER = "mosaic"

FILE_UPLOAD_TEMP_DIR = os.path.join(BASE_DIR, "temp_uploads")
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.SessionAuthentication"
        "rest_framework.authentication.TokenAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",  # django-oauth-toolkit >= 1.0.0
        "rest_framework_social_oauth2.authentication.SocialAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
}

AUTHENTICATION_BACKENDS = (
    "social_core.backends.instagram.InstagramOAuth2",
    "social_core.backends.google.GoogleOAuth2",
    "rest_framework_social_oauth2.backends.DjangoOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]

SOCIAL_AUTH_FACEBOOK_SCOPE = ["email", "user_link"]  # add this
# SOCIAL_AUTH_FACEBOOK_SCOPE = ["email", "user_link"]  # add this
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {  # add this
    "fields": "id, name, email, link"
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("GOOGLE_SECRET_KEY")
SOCIAL_AUTH_INSTAGRAM_KEY = os.environ.get("SOCIAL_AUTH_INSTAGRAM_KEY")  # App ID
SOCIAL_AUTH_INSTAGRAM_SECRET = os.environ.get("SOCIAL_AUTH_INSTAGRAM_SECRET")

# SOCIAL_AUTH_INSTAGRAM_EXTRA_DATA = [
#     ("user", "user"),
# ]


ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# SOCIALACCOUNT_PROVIDERS = {
#     "instagram": {
#         "SCOPE": ["basic"],
#         "AUTH_PARAMS": {"auth_type": "reauthenticate"},
#         "METHOD": "oauth2",
#         "VERIFIED_EMAIL": False,
#     }
# }

# ====================================
EMAIL_HOST = str(os.getenv("EMAIL_HOST"))
EMAIL_PORT = str(os.getenv("EMAIL_PORT"))
EMAIL_HOST_USER = str(os.getenv("EMAIL_HOST_USER"))
EMAIL_HOST_PASSWORD = str(os.getenv("EMAIL_HOST_PASSWORD"))
EMAIL_USE_TLS = True
# ====================================================
# Celery Configuration
CELERY_BROKER_URL = str(os.getenv("CELERY_BROKER_URL"))

CELERY_RESULT_BACKEND = str(os.getenv("CELERY_BROKER_URL"))

CELERY_TASK_SERIALIZER = str(os.getenv("CELERY_TASK_SERIALIZER"))

if CELERY_RESULT_BACKEND == "django-db":
    INSTALLED_APPS += [
        "django_celery_results",
    ]

CELERY_ACCEPT_CONTENT = ["application/json"]

CELERY_RESULT_SERIALIZER = "json"

CELERY_TIMEZONE = "Europe/London"

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

SWAGGER_SETTINGS = {
    "DEFAULT_GENERATOR_CLASS": "rest_framework.schemas.generators.BaseSchemaGenerator",
}
